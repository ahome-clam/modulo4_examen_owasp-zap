package testUI;

import apiClient.FactoryRequest;
import io.qameta.allure.Attachment;
import io.qameta.allure.Description;
import io.qameta.allure.Owner;
import io.qameta.allure.Step;
import io.qameta.allure.junit4.DisplayName;
import io.restassured.response.Response;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;


public class VulnerabilityTest {
    public static String globalIdScan;
    @Before
    public void before(){

    }

    @Test
    @DisplayName("Verify the vulnerability test using OWASP")
    @Description("This test case verify the attack of vulnerability using with the last pluggins")
    @Owner("Cecilia Alvarado")
    public void verifyVulnerabilityScanTest() throws InterruptedException{
        globalIdScan = startScanningOWASPZAP();
        monitoringStateAttack(globalIdScan);
    }

    @After
    public void after(){
        generateReportOWASP();

    }

    @Attachment(value = "{0}", type = "text/html")
    public static String attachHTMLFile(String name, String html){
        return html;
    }

    @Step("Start Vulnerability Test using OWASP ZAP")
    public String startScanningOWASPZAP(){
        // Iniciar el scan -----> Obtenemos el id del scan
        String startScanUrl = "http://127.0.0.1:8888/JSON/ascan/action/scan/?url=\"http://todo.ly\"";
        Response response = FactoryRequest.make("get").send(startScanUrl);

        String scanId=response.then().extract().path("scan");
        System.out.println("ID :"+scanId);
        return scanId;
    }

    @Step("Monitoring the Scan of OWASP ZAP until 100%")
    public void monitoringStateAttack(String scanId) throws InterruptedException{
        // Preguntar el status del scan, llegÃ³ a 100%?   ---> por id
        String getStateUrl = "http://127.0.0.1:8888/JSON/ascan/view/status/?scanId="+scanId;
        String getAlertsByRiskUrl = "http://127.0.0.1:8888/JSON/alert/view/alertsByRisk/?url=http://todo.ly&recurse=true";
        String getSummaryAlertsUrl = "http://127.0.0.1:8888/JSON/alert/view/alertsSummary/?baseurl=http://todo.ly";
        String isCompleted = "";
        while (!isCompleted.equals("100")){
            Thread.sleep(30000);
            Response responseStatus=FactoryRequest.make("get").send(getStateUrl);
            isCompleted = responseStatus.then().extract().path("status");
            System.out.println("OWASP Status: "+isCompleted+" %");

            // Alertas
            // Total de alertas encontradas por nivel de riesgo
            Response responseSummaryAlerts = FactoryRequest.make("get").send(getSummaryAlertsUrl);
            System.out.println("Alertas encontradas:");
            System.out.println(responseSummaryAlerts.getBody().asString());

            // Detalle de alertas encontradas por nivle de riesgo
            Response responseAlertsByRisk=FactoryRequest.make("get").send(getAlertsByRiskUrl);
            System.out.println("Detalle de alertas por riesgo:");
            System.out.println(responseAlertsByRisk.getBody().asString());
            System.out.println("\n");
        }
    }

    public void generateReportOWASP(){
        // Reporte HTML
        String getReportHTML = "http://127.0.0.1:8888/OTHER/core/other/htmlreport/";
        Response responseReport=FactoryRequest.make("get").send(getReportHTML);
        String htmlReport= responseReport.body().asString();
        attachHTMLFile("OWASP Report Vulnerability Detail", htmlReport);

        String getSummaryReportHTML="http://localhost:8888/HTML/ascan/view/scanProgress/?scanId="+globalIdScan;
        Response responseReportSummary=FactoryRequest.make("get").send(getSummaryReportHTML);
        String htmlSummaryReport= responseReportSummary.body().asString();
        attachHTMLFile("OWASP Summary Report", htmlSummaryReport);
    }

}
